% Número de ciclos de entrenamiento
num_epochs = 4;
max_performance_threshold = 60;  % Ajusta este umbral según tus necesidades

% Inicializar la red neuronal
net = feedforwardnet([6, 7, 6]);

for epoch = 1:num_epochs
    % Desordenar las filas de los datos de entrenamiento
    num_samples = size(training_data, 1);
    permuted_index = randperm(num_samples);
    training_data_permuted = training_data(permuted_index, :);

    % Crear una variable 'inputs' que tome las columnas 1 a 12
    inputs = training_data_permuted(:, 1:12)';
    
    % Crear una variable 'outputs' que tome las columnas 18 y 19
    outputs = training_data_permuted(:, [18, 19])';

    inputs(isinf(inputs)) = 5.0;
    inputs = double(inputs);
    outputs = double(outputs);

    % Inicializar la red temporal
    temp_net = feedforwardnet([6, 7, 5]);

    % Iniciar bucle hasta obtener un modelo satisfactorio
    while true
        % Configurar y entrenar la red temporal
        temp_net = configure(temp_net, inputs, outputs);
        temp_net = train(temp_net, inputs, outputs);

        % Evaluar el rendimiento en datos de prueba
        outputs_pred = temp_net(inputs);
        performance = perform(temp_net, outputs, outputs_pred);

        disp(['Rendimiento en datos de prueba (Epoch ', num2str(epoch), '): ', num2str(performance)]);

        % Condición para descartar el entrenamiento si el rendimiento es mayor a 80
        if performance > max_performance_threshold
            disp('Entrenamiento descartado debido a alto rendimiento.');
        else
            % Si el rendimiento es satisfactorio, salir del bucle
            net = temp_net;
            break;
        end
    end
end

Ts = 100e-3;
gensim(net, Ts);







